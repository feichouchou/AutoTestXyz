# -*- coding: UTF-8 -*-
from common.apiBaseCommon import baseCommon
from requests_toolbelt import MultipartEncoder
import requests


class apiAutoTask(baseCommon):

    # 任务完成接口(任务类型1、2、3)
    def get_rewards_bytop(self, send_data, statusExp=200):
        url = "http://test-api.xss.91xunyue.cn/?service=App.Active.GetRewardsByTop"
        resp = self.send_multi_data_return_result(method="POST", url=url, send_data=send_data, headers=None,
                                                  cookies=None, check_status=statusExp)
        return resp

    # 获取服务端任务auto_code
    def get_autocode(self, statusExp=200):
        url = "http://test-api.xss.91xunyue.cn/?service=App.Active.GetRewardsByTop"
        send_data = MultipartEncoder(
            fields={
                "ts": "",
                "service": "App.Active.GetRewardsByTop",
                "sign": "",
                # 全都要任务
                # "data": "Z1psZ1pia2ZDdUtzMGFxWUVNcWZTZ2phemdsWkpwcG9oZVhjbmVaSTNzcTFIWjhmYWswM3R3STJqZ0dzUnFITWV2NWdaaTZSYmQ5UDZ2MkxaeklhYWlwUWd0bHdIcTM0a2V0ZFpZLVRybkUyNXBvNmN0RzRiaWtzZXNYOEZqdEZZZ05mWnQyRG15b0NNcFdRZ2YxODZpYTRmaWJWSldyZmF6RTN3cjRDN3JvMEJvMjBhd1k4cGV0OWJkOVA2dG1IN3hYMUp0WnM0akZ3SnFhOGJ0TDE9aGR6MGpGYjl3V3VkY1dvQnRIOGR3V29KazhoamhySEx0bjdWckZSSHAyVVl2bE1VaVdnZm1kc0NXTGpha1VMYjBKaWtxbFVRbEdvUmVuUU1wTzFrWEtTQnBtMzZ4bjJ2ZzVnNm5ISTdrWkFCcnM0RVp1emV4MDM2cW5pWWNtb0F2SDhwb0hnSnFkRm9ocjM3eUczUXJGaU9qWXNZc2xJVGtwRXNuYzVDWnFibXhrUHNwM2lxaG1jcW1JOFNtWXMta3VoalliWDZxVWZOeG4ydmo0MDZlR2c0ckgwLXU5WjdWcXJheGszMnBvS1p1b0xLbzRZeXRYUS1qdDVCZHFuZHhrLTR6M3RLaW9vT3NuazlucE0xbU5COVZ0N0F4azNzMEkyNmNHc0JxRzA4czM4OHNOMTBlOHJFdjBmTXpHMkVoNWc2akZRSXFZMGpyck43VjlMcngwbnNxV2VocVlRZmk0WXl0WUFJanQ1QmR0bUMwRzNtakdLSG0yY09zbFU4djU4cWpjbEpXcmpmeDJqYWtwYTVybG5LcTM4U3dwakVzZDlxVmNuSXFralJ5WHlhaXBRdmlGQTVxMmtndGM1WWdOM2d5WHZzcW1pZ2QyNGJpa3dkakhiSWtyaFRRN0hWbmpyUW9XYTZpb29QcUY4OXRLMGptTVo5Yk5IbjEyZTAwSTJtclpnQWxtb3p3WEk4anV4ZWQ3bUVxVzdJajJGSXRJb2pqNDA1cW56THI4MXFYLVR6anpuWXdueVpyWGtha2t3b2kzQUFuc3NMZE03bjBHM1BvNXVBbTNnUHRXNFRrV3dxaEwwSFc5REl4a0RKMEkyNmNITT1yVjBtcTM4OHRkZGJkNzcwcG0zN3ZHMkZrNDA1b1ZnOHE1TVlkZGhxVjlEcG5FMjV0V2VndTI4dHZIOGNqcTA3cHNzSGg4N3BwelRtajRDTG1XUWdmMjRUa2EwcWhMMUZaYmZiMDJmS3M1MndtWE1OcUhRaWZaa1ptOWRiZDlQSXFVcjZ4bjJGaTVFeGUzM0FxcE1vdjljRGdOM2d4MG43cXA2Z3NIa2FrMGd5ZXEzRHA4dG9iTDM3eldmTXg0dUtqblVndUZNa2tha2ZsT3RMV3NySXhrREowSTI3bVc4QW9Wa1pmbzRWanV4cVRMM0V0VWZOeDRlZmw0UWdzNFl6a1pJWWRzMXBoZDd6anpYM3BtcXByWG5Kc1lzeWVxNEluNlotZWRmSzBHdldzRm1CaW1jbGwxVVVrV2NmaS10N1dickl4bWJLbG82NGNHOEJxSE1tdEpnLXVOMWhkODNJcVVyNnhvV3Vjb2t4ZTJ3NnFta291dGhZZ04zZ3lYdnN0V2Vnc0hrYWszRXFvSUFDbnFab2M5Zi1zMzdub0dxUXBXY09zbFU4djU4ZnI3VkxXdDJCMEVIV2padWxoNWdBbFZ3SHNaZkZoOUIwZWEzSXRselIxNGhKZXBveGo0MDVsNUlKcnJGWWdOM2RvM3ZzdkZlcHQ0UUVqM1Fxbm04Q3A5SmtiTDM3eldmTXgybVBqcHM2ZWxRa3Eya2htYlVGV3RESXhrREowSTI2Y0hNTnFITVd0b0FvZnRCM1UtdjZxR0Q2eG1Hcmhwc2x3MnJCbHFBMWVyRldiTzNwbkUzMnRXZWh0WHN1ZW93enRwSTFqdDVDYkwzN3ZEZlNzWWVQajRzWnFGODV3Smtic3I1NmNiemp5V2Z4eVllZ3E1RTZrbkFoZVhNV2h1bGZVLXY2cVVyNnhuMkVlb2s2dG1nemtaQUNwTDFBVDlEenkwNzV2RmF0b0dvQXdYa1p0blEtcE5GLWRkYllralhsc0c2RG9JME9zbFU4djU4cWhMMUZaYmZieldieHE0NjZybzBBbzIwaWVvQXFqLTV6WUszR3RVZk1rM3lhaWxFanMxckZsSkFYdmJGTFB1dnJ0VTd3cVh1N3Juc3Jsa1llbjN3OW5iZGJmTXpVcDM3ZHNGbVJvMVFoZVhzb2lwSXFoTDBJWmJmYnhWMjFxNEM1aEhjUXEwZkJ0Sm9abS0xcVBNckd0amJKeklXdWk1b3dvV2c4b240S21jcFhQdVRxakU3NXJtZWxnbm91bDNBcW42NC1wTkVMZ2M3cHIyRG15NXlybDJYSXVXN0RrcXdqaExKVFo3dm5qMlhhcTRDdmMxb1FxbTBtdlpvWmk2UnpZSzNHdzB6cnpYMnVlcFU0bmxjNm1YMDJyZFpwWTlyMHlqMnp0bnlwc1lMSmZudzB0WXc4cWJzTGh0clpvelhjc0p5Qm8xTEl2V2NUbG5jc2Q4cEliOHZYeTJid3MxUzRsRzg5cUhMSmVJOHFsLVIwUDZuM3dXSFp4NGllZXBvOWtWdkJvWTBLcjlZRVB1amluRUxFdDFlaHFZVUV0VVkxb0s0S3FjdFlmTTJEbG5qbHNtV0JrbWc3Zm5rOWdhQXJkNjFKWjhxS2ptYndxNHk1aEkwQXFITVdlSUFwbDZ4blBzYmZ2bHZSMW9aSGdvc29qSG5GcTVMTHY4MEVSdXZydFh6WHMybElzWG5LazR3aGkzUVRwN3QtZTlYWnJ6ell5bDJHbzNZWXMyY1h3S1kwc3NwNmJOQ0t4VjIxcTRDNWhIY1FvbTRpdUpmRWVxeDFaY3I1djB2UjA0YXVjbUlnZVZnRW9ZMDJ1czVxWC1UcWpqM3d2bnV0c0hzZGdrY3l0WFE2cDd0LWR0Zi1velRkc0haUG1uZ0x2V2NUbG5jMG1McEFiOUhualdYYXE0cXhybzBEcTEwaWdJOHB1ZWhqVExMU3YxdThqWVd1ZXBZdmUyZzhySDBvcjloYWhlejFzRXIydGxaUXRZTXNpbkFoajI4THBzdG9ndGpZb3pUa3NGMk1wMms9dVc4bmdhb3ptclY4WHJ6VDFtYTJ4WlM1bEl6SHJtNElqcGdadmVSMVZjYkJ0bjNGcW4ydWk1c29pRlFScTQ0a3RiQkFXOUR6eTBMNXZJMU1ybm91d1lrb2VvZ0NwS2RLaGRqb28zZmNqMTJMbzNZWXMyY1lqbVl6bEtsTVo4dUcxMmEycHBtN2hGbklva2c0Z0pzWnNkeDBQNlhCcmtmUm5vZUVlbEV3b1dnQXFtZkhxOWg9WTk3MW9EMzh3MnlkY25vdXdYQXllbWNHbHJkZ1R0ZUR5V0xseW9DRW9uZ2xzWGctbXB3MG1LMENic3VLMG1yTG8xV3dsSmtCcTBmQnZJY1ZrN1YxUE1iNXdVdnYwNGFFaDVvOG4wODdvbzRrc2MwRlg2ejB0VnJydjJ1bHQ0TXVlbGNaZUhnTXFidG9nTXlEcTNybnNGbEhtM2toZ1hrb25wNDBpTEpJYjh1Q25rMnpuNTY3aEhjT29VZ2l0Sm9abTk1MlVLM0t3MHpKam4ydXVZczVlMGNFbVhrZ2h0aFplZWYxb3ozdXQzeXByWG5LbTR3enRxNEtxY3RZZk0yRGxuamxzbVdCa21rPXVXOG5nYW96bEtsTVo4dUcxMmEycHBta2MzTTlxRWc4dHBnPWk2UjJaYjc5dzBycnpYMnVlbTg0bmxjNm1YNDZ0YzFwUnVqeXJEbjl0M3RNdTRMS2tvc3BuMmM3cHN0b2d0alkxWFRkajR4SGpZNHhzVzdEbXF3MXM5QUtZdEdLeUdiWW5vNm9pWWtIb216SnZKY2xldTVzWUtuTHZ6Zk0wbjJ1ZW93OWozNEFvWXpMazlWblR0N2lwV3p6dG50UXRZSXFmb0FxbjJzTXA2ZGJnczdZbGpYY3lweURtVlFwc1hrWXdJb29pcVZDWnFmYjAxWEdxMlc4aEkwPXEwZkJ1SElBazlCMGU3TEh2RzI0eW9aSms0Y3hqR3ZBb28wZ2RkWUZWNnpvb0dEcnYxUklzWElhbDFjMWo1STZwNllEZmJEPXEyRGx5MktOb0luTXUzZy1ucEF6ZC14LWM3cjV6VjNhbG1LNGxtSUJtbDQ0dUk4cGZ1aHpYS25MdDF1NDE0WktpcFk1ZTJ3RWxZb2dmY3RaZWR6empUWHpybWVsZ29ZZXRYNHllbWNDa2RKZ2VkYj1xM3JteGxtT29uZ2x1M29vaW00cGlOQjZiNlNDelZYR3EyVzhoSTA9cTBmQnVISUFrOUIwZTdMSHZHMjQxNGllY29jeGU0NDRxcE1nc2N3RVotN3p0WHpYczJsSXNYbktrNHdvaTM4Rm5iZGNoODdva243bGpHNlJtV1FnZjI0VGthQWZzZXQ3V2JySXhtZkxwNXF4aVhjQnJWMGV2b0FabTlkYmQtVDBwbURGckhtUWNtTWtqNDA1bEh3SnJzMT1VLTdyc0U3cnY0R3BjM3N2azRBeG4yOEhuYmRiUTh6VXAwTFlvMktyall3PWsxSTZrYXNmaEtsOFctMkIwRUhIcHAya3FsRU9sR29ad280TWp1eGdVYkwzcW43dWpuNmJpNHdsbUk0ZW5Yd2dtYkI5ZGI3ZHgwMzRxbWRNcTI4UWVZMGRqSDhMa3QwQ2dMUGxwbjdiMTIyUGoyVWxyMU1LczJjc2liNTlXOHJJeGtESjBJMnhoSGJKcW0wZXRKZz1pLWhzWS12NnFHRDZ4b2VlbDVZNnRrOEtvb3dKcnJCWWdOM3FqRWEwdG51aHNYa2Fra3dvaTNBNnBORUNQN0xVampiU29HcTZpbzdIc2xJVGttYzFkOHBMYnN1R3ltYjhwbHFncjVVNmtuTTR2SmZGazZac1piNzBwbTd6dkcyRHRJb2pqNDA1b1pNa3BMMThmZGZheVh2c3FXcU9xb1FFbjNRMGtIUTFqdDVDYkwzOTBHM1BvNXVBbzJnZHczb1h0S3MxZE1aNmI3dkp2RTN0elllZ3EyWEpsMW9WZUhNTXJLWmZoN2IwcG0zN3ZHMkZqNDA4ajQwNWw1SUpyc3hWVnVmcG5FNjB2RmF0dW9VZnRZMHFucTA3a05CSmRzelVwbmZibkc2R28zZlF3MjRUa1d3cWhMNTFWdDNKdkUzd281dTZpVzdJb25NOHM0NFZqcXBxVEw3MHBtS3p4bUNhaTVjd3RsdkFvV2c2dGM1VlZxcmF4MFg4dG82NmRXNEJyRW9xdFlyR244aDFRYkgtdG0zUG5HNk5vSm9nZjE4N2pxc3NqYjVJYnN2aXhrREdwMVM2dW1uTmtuQVZlblFXaXFaZmQ5LUNxRWpReG1DYWk1VXduRk01bDU4YnVMSldXdTdnb1ZtMXEzdXN0RzRSckg4Y2kzQTZuc3QtZEwzN3lHM2NzVzFJbTJVaHRWTUtsYW9nbWNrR1p1MkJqVUhIczQ2amxHbkxsa2dsdklBbWx1dGhVYlhJcTJITTFtT3JtNGtnc28wNW9XZy1kZGxsVnFyYTBsZTN4cG00Y3BVUWtva1p0Vzg2cHN0amRyUDZwMkhSeW5WS200czZ3Mjg5a1dncm1jVUhXLTdxMTAzczBJMjZoSXpMbzIwSHNYVTdqdXhmVWR2SXBHN00xbUtSbW9vamlGQUdxMmtzc2RkQVctVHpqempzcUkyZ3VXNHFrb2tadG5QQ25zeGNQZFhva21Mbm9JQ0xtM1FnZjE4NmpXZ2dpYmtDV3U3OGowSDl3STJqZ0dzUnEyMGl0Sm89c2Q1c1lORDhwbTd5eG1HQmdwb2tzMWNJbFhvanZiSm1ZcVRmb1dlNHFIaWtjVzh1bm9BZWpKekRrOTUxUDdQVm4yN1J4MkZMbW80c2VXODZpV2dncjdsTVo3dlcxVjdYbnB5bWxXbktvMjBwZkhVbW11NWdlc1dCcTB2VXhtQ2FpNUU2ZUdnR3JJNGN0ZGNGWHQzZ3hrMzZwbzJPcW5uSmdrY3l0b2dMcXNkYlE3M0d5anZycUlWSXNaWXVsb3M1a2FrYnNzWi1jZEg5eDE3YXlZLWdxNEFBbDBncXRZQThrcVJnWWJMNnFFdlFqbUtyaXBzeGlGOERrWlFrc05WcVctNzFvRXF6cG82R3FtMHJySXNkd3BESGtzaG9VN0Rscnp6UHNXV01qbVVZZWxVa25XY2d2ODFLYzdlQjBFRHRucHVrbFlQSWwzQVZmSFFtck4xZVRMN0d0MXpWaklaS2k1TWdzM1U1ckdnLXN0VmxWdWZheW1EOXdueXRyWVl2bm44ZnNYOEpqdDFKZHRYb2tuN25vR3FLbzJrcHVYZ25uWjhocnIxTFdyamExa0RYbnB5amxXSElrblBBYldrV2FxWUVNcWJVZ2phemdsWkpzWUlKcW5NRGJXZkVhcWRUTXFhQmdqdkZnbFpKb3BZTHNYaz1ySnIzZDZZM1BMVzJqelNvajFaTWRGTEhyMFhHcW00emU5a0tjNm1EdmptNmtJaFFjWUhLZUhqRnFwakVxNllHUEt5Mmp6YW9qMmQ4YzFEOGUwZzl1RnJFZDVrRlRwbURqU20xajFsSGNWRDhlMGYxZW5qM2Q2UTNQNmI2ekVEa3pKaDhjMUw4ZUZiMWVtWDNkNllFTXFhRGdqYkdnbFpIWmxMSnNZWDFlbWYzZExVM1A2UzJqemEwalZSSGNVWEplenJDaTFyRWRaa0VQOTNFczIzbndvTjhjMUw4ZUZiMWVtWDNkNllETXFhRGdqYkdnbFpIWmxMSnZYY0RzMzgyYXFZRU1xZlNnamF6Z2xaSmNFWEplenJDaTFyRWRaa0VQLWpBeEdueGdsWkpabFFZYmtmQWJXZkVlYWh6YzlmM2tEdm53VmhRZGxJNmYwekJlSm5MZnFoMVBkbURrbWZwa0loOGMxTDhlMWoxZW1YM2Q2WjFndWZGdUdmdnhvbUZ0WEFMc25NMWJXZkVhcWRUTXFhQmdqYTFnbFpKWmxnYmJrMFVmR1lwcHRKVGRMM1ZxMXEzem8tanRDQ1c="
                # 转圈红包任务
                # "data": "blJlMGFSZWhOemxpLVVmUTlnclZNaXVmUW16d1dteGtGYnkyOW9TbE1kaXg2eHVSNXVDa0FkUXc9YWhNZWxCbWpyQmk9Y0JoN3Q4VlVtPThJZXpvWlpQYk5ieC1relN5SmN6bHVwZHgzeFJNS3F5Y1BhZXdoaXZlVHF5ZWRvQTlFcHZWVTB3Z0ttaUE0aXdBdmF5LTBzUmlIZGl4Nnh0dDQzaDQzWkRjR2dmMGVtaGVVcDFhbG1qcHp2TFZkM0JvbGU9TVZpeFVCZ3hTeHpVV2twVGR2c1BwLXk9elRaeVVUbEI4a1k9Q0R2U3VlcFNOaXJ1dGF6dkFNakMwUm1mTUNZaTZvc2lpRmVRVlZ4ZVZUcC1nNGpndzFiQjhobVBLRm4xaXBwZ3QtcHU5ZDBob0xvaTBtYz03T2FoS3BwelN5ZHc1VW84UmV1eTdQZEFBUGFpa2hqZS1WdkNxeVh4eGkwT3RhenY4WWd3WVZrPThHWXktOWpUMk1qeTlaeWN0MTBSOEFvQms9Z3ZraGs9LUpwRS0ybXdoN3Q4VlVtPThMYXZRdVpDMEJiUG1sMUVhSmV6cHNzTk4wc1I4b3F5Y2ptU2toaWkyRXR6dWVvQnMtbz1KbHBQN1VmeUF3amZNcmFpbWt5eW1UakFsMzB0eDRuaDh0bnd6RGh3a2hrPS1Jb0ZxPWRSeDN2T0JZenZVSGZEZ3dkQzRMYWgtU3gwU2pjenhrdGNSQ3hSTTBxeWNUalJBeWM9OVJwMDJkbGc1T3A3TnVsQXdYbHhuQmpoZ1JhZXlreUZlPWRpOXowZVEtcy1nNGpnMHZhaEFJZz0tSDBVeW9jemwwdnNrODJCalBxU3dialMwQmVQbWxseXlGb0N0a3RjUkN5aE0wcnlYLWpTczhZPTlScDBCUlhpUlMwT3RYcFBBVWp5QVNVUTdLaVNhMW5TeFNkaXhkeHNCZnhTNHNaQT05YmZvcWl2T2lvRTZwbWhkMHFjVlYyQmtYZnZrVmk9d05ldjZsMEVTemZpdFhuTXgtdnc0dm53STFheXM4ZEM2T3AweVRsaVJTa3VCVXpCVUhsQ0Vpa0JnYmFpbWt5eFNFaGp0VWs4dDFwdVl0bkFBR2JCQT1VZldGdHhTcmxCZENxT3hZbWY4SHFTd2xkPXdJZXZta2tDeUpjanRac05ORXZBb3JyQThnZGVjblo9T1BxQ2VkWGh0RWp1dGFxZlFLZ2hvaFVQTWNoQzJvb2oyRmVpeDJqOXRlcnlrbm93RThoUDREaWZXRXBGaUFnRHAtcHV0Q3p4YzFaeTh0Yz03T2FoTlFqMFdqb0N0WG5NeD15ZzBLblF3MmpCODZqd3lPdkNhbG5BdDRsdXBzdVFjSGdTd1dqZlFGY2VtMXhFYVdoaTlVajl0ZnR1c3NyQndHYWg4UGlnLXlxRTI5Z0JOMHFPdFUzd0FpZ3ZVbVpBZ0Nid3EwalNDSmdmZFp4OGREc3d6U1p4WTRaeUFoaWkyRXZTcUlZUnhpME90YXp2OFdnd2N6bD1FQ2FpLXAxRHlGZVFWVnh1VjRxQ3M0ZVB3R2d4TWVsUUN1cHhtbGxndC1wdTlWM3c4MWF5NHVVPVBLZXc2bDFFU3paamRVeC1GMHJ4OFZueVQ9YnVneWVQQ1Z2enBWb2d0MXlPdFl1ZnNIZ2dZV214b2ZaeS09b1UtUmh2VmR6ZVJpdXg4dG53d0VieEFwbVBTZnF4aXFsdzg9cHV0Q3p4Y2xlRDB1Wi04R2dnMVB4eUtGZGpsVXh2bDB5aE0wcnlYLWpTdzZpZjlScDAyaG9nOU9rZnhVenkwSGxQVDlpQUF3ZXlhMGpEbU1od1ZVazh0MXJ5MHJuQXdEYmdvWlVQT3ZzeFNxY1JNLXFOWjIzPVFpaUM4Wm13Yk1id3EwalNHR2tEbGsxOXRGc1Awb29nRVRhaTBtaXctVHF4V3VsUTlpc3ZsWXVoRVhnPVVpamZVY2ktZW8xRDJIZXdaZHhNdDAyUjhCZVB3R2dnNHFrUmhOa2t5cmxndDBxY1ZWMWhqUWpEWWxkQm9TZ2YySDBTeUdtQ3RZbk10LXJ4TUtyQ2NUV2VjN2poS1Z3aWFsWXd0NGtyTnRxUzBIZ2dZV2l4ZkxkeXU9cGkxUmRpeDZ4dVI1dUNrQWRRdz1haFFxaVJtSXdrLUFjdnM5dDlwVjNCYzFiemdWaXhVQmJoQzB4eS1mZHkxbHRkeDd2dWcwcGgwUGFld2hpeHFJdEVDMXB3QlBzdnhrekI0SWdCY2htZkxLY2gtbm5TMU1qZ2wzMS1VLXRCNENkUXZDYWhMTlVoaWkxaHUtbXhoLXY4cEQyeG8xcmpZVmlpMEJneE94amtkT1pqdHMxc3NCcnhRQ3BoMDVpQjhrWT1DTHZSYUlYaHhqeWJOVXpCVUhnd1lWaz04RmpTdS1qVFdFandsRGplTmlseElubkNJMWJoQVptZk9FamxxcGY9SkRxdFZWbnRyUVotZi1ZOXJLVXlhOHpFU0puLWM5ajZjLXB0clZkLWYtVXhjTmxSNi15VWVCVWZROWdyVk1pdWZRYnZ2OFZ4blFnaHhMd0VsVFk9VnZrdVVDbUJyT1ppZ3VWaGpQZ3V1LWwwaFJYPW8tZ3JROWl1Z2hXdlQtamlYOVV1aEFqU1JCWHZRN2dyUTlpdWdoV3ZULWlpa2tnaW1QZ3hWT1VmVk1nclE5bHRyUVotZi1ZOXJLVXg2TGd4Vk9VZlZNZ3JROWl1ZlFXdlVQUmVmS2lpbXh4MGVCbS1jOWo2Yy1wdHJRWj1UeFV1ZjlVdmxBakJXUWpqVjJwdVl3bC1mRFpRUHhVdWZLUmVoTmd4V2ZVZlE5MGVGMnl4UERaPVR4VT1iOVV1aFBra1NDakNnQ2tPWnZtZTdUWnlYQ1YtYkloTzlVa2taTWtmUUF2T2dDeWRyUVotZi1ZOXJLVXhtUXpWZTdqQzUwd3VCPXdTb0hveWZ4VXVmOVU9ZEFqQlZOWXZZOWtiTTltZVhWV3ZULVJlMGNSZTJma2hPemppQk14TXRQc0F2U3B5NFlsN1dY"
                # 元宝视频任务
                "data": "bGdxb05QZFI0MWhyNWdxVDlQZFdIaXRlSnd1d1Zrd1d6c0J6NW9MajdZZ3kxendmRnMtWXRXLXU1cndMZDBOWVRhdGVwcVB2SHQ3WVVUdXV3cXh6a29iUEFad3VQMU83RW8tb3VZUHl5eFFMRDB0Y09ZZGlQei1iUHFyY01qLS09cnhqZ3lzVTNmUS15ej09dXAtd2tiOWV4cnc9R3hzdzRrUXFmbEJuUnZyb1JrZ089cnhqZ3l1c3plOVdZM0FuZW82TVVnd0d2eEFQdHpOVVRrUmVxdVIzS3c3bkFTZ1NOMlE3am5MMHplLXFJM2didXJ0d2FnZXkwdkE9YzFyQTFXaHFUdWVyQXFiWVZnUVdPcDlmeHRidzBaQXVQM2VIQm51Z1lrZXU1cndMcHlkYzRoUXlndE82TnB0OFpZZk9jci1IZ283VWViaHQzcC1MYXB1WVVoZHVBeC16dGo4MGlqQXVWenU3UnFyWVVpLXUwcEI3NWpNMDdldy1VMGU3QnlOd3Rodmk1eC1qZ3pMdzVZdzZnMC12SHQ3WVVUdXV6bXRiNW9PbzBaT1dRM0FqRXEtc3NiPU92c1E3aDB0Y2lrUldQenh6QXRzc05qPXQ1cUJYeG5MdkJZZy1xMHVMcXB1WVVoZWk5eE96RDBzMDRVUXVWenUtT3c4WVVpLXV6cUJ6NnBjMDNlQUNUenVUQXAtZ3ZiQnE1cnc3T3h0UVNYeHlmdmVmT3ZOQWhqZ2FOMGc9eHJMdkJZZ3lIenVIYXA2UXVTdmk9eHZ5TXl0VUVZZGlQMEJuNnB0QXpqUVI1czlmeHRiMHVZZ3kyeE83RDBOd1hYeG12eHV5STA5WDhqQXVWMGh6QXRiWVZVZXV2MlE3d3RiVUNmUS1jM3dpSnllZ3ZXLXQ4cndLTWp0VVNqQXVTcE89TnR0QVJTUHQ0emhYeG5MdkJZZ3lMbC1UdXQ5c2xYLXU9dnc9NmpNMFBnQnlVbD1iQXFiWVZqd1c9cnR2Z3hMa0FjdXFRMkFidXJ0d1hXLXk1dnYzb3hySTBZeGVxdVIzS3B0d0NnZ1NObXdQZ3g5STBld0NjMVFmYXB1WVVoZE91dng3Z2s3dzFXZEtWei1MUnFOMHlTZUd3dnRibXhNZ0NaQXlUbWU3QTBOd2tiLWkydi1qZ2s3dzRYaHVVdVBiUXQ4Y1lrdTZhdXRibW9MQT1adWFIbHY3UWp0d2FYT0N5c2Z6c2piQVBmQm1UcWY9QXF0MDJTdnVacnhqZ3lyRTdmT3F4enVUQXAtZ3ZiQnE1cnc3T3h0UWlTZzZudE82TnB0PUFTZ1NOMlE3am5MMD1mUG15ek83QnlOd3Rodmk1eC1qZ3pMdzRVZ3FudVBiQXFOd1ZoZUN6dHRqeHg5WUZjZy1QbD03cnJxZ1prdnVBcnc3T3hzd2lad3ludVBiQXFOd1VrZnlLc3RmeG9NVTFadmFmbE9MRXNxZ1pndWUtc3Z5TGpzWTNYeHlQenh6QXZMbzNUUHlkMlE3bXhyd0RaZWF0Mk9EQnB1d1prdnV2c2VqaHh0WTRYeGVncU43UnY5QVJqUHlacnR2Z3hydy1ZZy1RM3Y3dWt0NHRTLUI0dj0zaDE5UWlVaGVQekFUQXB0d0NnZ1I1czlmeHRiMEZlZmw9MnU3QnlOd1liT2V2c2VqaDE5Y1NYeHVxcVFITXQ2WWRpUVNkdXc3bXhyd0Rad3lYM2VQYnFxZ1pndTk2cnc3T3h0UVNYeHlvcU43RnZzbj1nZUd2cnh6Z3h1bzBmUS1jM3dpSnlla3RnZXQ4cnc9YzByQU9UUnlQenh6QXZLVDhnPXlldkJYd2o4azdjdVdQbS03QnB1b1lndXU5c3ZuWWpiQWZiZE9VcWZhS3FNYzJrdUNLdUFIazE4UD1admFmbE9QQndPb2trdnVBc096aHliRVNZaG1Vej03UHFxVWRnTy1kdXh6a3NkNEVadFNjMHVUYnhLUVlrdnl4cy1ucHhMdzBqQXVwcU43UnZzc2RpUVI0bWc3bXhydzBaT1dRMWdpSnQtWWtiQWFBeHV6RDBMdzFoQXVUcE83S3B0QTNrd2FObnRiNnl0OEZmT1dQbS03RWtxUXRYQm12c2VqaHg5VC1ieGVxcmUtTXB0MDZnZ1MwdUJqNW5Mdy1ZZ0NZemdqRXdkOHZYdHQ0dj0zaDE5UWlVaGVQekFUQXF0MGtnZTZKckFEeHRjMDdjZFNjMWY9YXBxa1Vnd2F6dkFMdzE3RVBiaHlmekEzQnE4Y2drZTk0dHc3am5MejdlZW15M0FpS3I5c3ZXLXQ4cndLTWp0VVNrTnFvMD12S3Y3c0RqZ2FkM2hqZ3h1bzBldy1jbGdtSmx1d3NrZXQ4cndQN3pjMDRnQXVTcE89SHZLWTNTZnllMGRiZ3g5STBaZVdQMU83RXllZ3VTPVN1eC16UGpkUWlTZzZQekFUQXF0ME1rZS12bGh6a3JLTURaZldRbnNxSmo1ZjlXOGQ0bEJYNHo5UTRpOGQ0bDhxS25wZkNXc2Q0bEFiTTBkc3VoQWFyaXRlSmdxWU1QZFI0aXRlSmdxVU9QZFI0MHhXOGo2VHdTLU5ybDllSGdxVDlQZFNKaXRlSnh1WVhlaFc2aXRlSmdxWU1QZFI0bDhxSmo1ZjlXOGQ0bEEzSGdxVDlQZFdIaXRlSmdxYjdTTk43bFFhTXpMWXpidk9JdU83QjFkekFYZmFBdUFxUHZyRTZad2FldjkzUmx1UC1XZUdyczlYcXg3VXpmZ3g1dXVpTm5NbkVqLUN3MVE9ajE4azhTLU9WeXVPSHJOMFRlZUMxc0FIbXlMOE1id1otemRyZXE2TWVndVdMdUJiWm9za2Jad3k1ei1IN3d0a09iQWVwcFEzbXZzY0Zhd2VVbGZqQnBkNFJhZXF4c2c9NW81Zi1YTWQ1cWNxSmo1ZjlXOGQ0bEE3S3M5d3ZmZ0ZybDllOGpMUHdTdFIzaXRlSmdxVU9QZFI0MmdiS3hMd3ZQZFI0aXRqWWdxVDlTY2Q0bDhxSm5KZjlTeGExelFyRmdxVDlQZFdIaXRlSmthY3Nmd1dzbU56N3dhYkVUZE9wbTl5SWpkYkVVZGFwbGdxSmt0WXhUQVpybDllOGo3WHdTdFNwMnhqTHVOWTNnZ2UwMmZUTHh0QXdQZFI0aXRqWWdxVDlTZGg2bDltSms2bjdUOGQ0bDhxT29aZkNYTloydVFiRm50NFVYT0NjbWhiQ3Flbks="
}
        )
        resp = self.send_multi_data_return_result(method="POST", url=url, headers=None, send_data=send_data,
                                                  cookies=None, check_status=statusExp)
        auth_code = resp["data"]["authcode"]
        return auth_code

    # 任务页领取元宝任务（任务类型4）
    def get_rewards_bytask(self, send_data, statusExp=200):
        url = "http://test-api.xss.91xunyue.cn/?service=App.Active.GetRewardsByTask"
        resp = self.send_multi_data_return_result(method="POST", url=url, send_data=send_data, headers=None,
                                                  cookies=None, check_status=statusExp)
        return resp

    # 获取任务页领元宝任务auto_code
    def get_Diamonds_task_autocode(self, statusExp=200):
        url = "http://test-api.xss.91xunyue.cn/?service=App.Active.GetRewardsByTask"
        send_data = MultipartEncoder(
            fields={
                "ts": "",
                "service": "App.Active.GetRewardsByTask",
                "sign": "",
                "data": "NTA9OGR6Qm1QSHowOXpCbVAwPXNjekJtUEVERWxJVXJLLVQ4OTdpMk45Q0lLRUVuTEFUczk2aURROUNVaEhrcmw9UDAtN2ozTkJRc2szU0RIOEQ4bzd5aVMtU0VrR2lESzhUOC04ekhKRGlVSEhFdmc5PTRrRVNqVi1Bd2NIaVRXOURza0ZEbkpFeVVIRVRIMDlURTA9aHpJOUNJS0VEREtKeUEwMlZ2WERBOGhJRWpXOURza0ZGPUZEZnN0SVV2azhQZ2tFVWJHLUFyUEhpVGhCREFvNzA2Ti1USWsyVTNoN0Qwbzd5elgtVElzMnlUaEI9Z0I3eWpTLUF3Y0lTWEhCPWtvNzA3WC1TRWtHaURLOFQ4LTh5M05CUXNrM1NES0V5VW89eURXLUF3Z0l5Ymc5RHNrRkMzVURnQTFGMHJHOT00a0VTelMtQXJQSVNER0lpRTE3ajJQREI4cEZ5REhHaUV3MjA9ZkFDTU9EanpqOVJ3bj1DelU5Q0VTRUVtUS1UczFBekhKRFFzazNTREgtRDhrRUY3R0RnQWxIVXZLR3owMDJUekctaUVsSEV2MEp6c2tFRjdHRGlVeEZFcjBHeU1rRVViR0RTWXhHa25nOURza0ZTWFdCPXNoR3pIZzk9NGtGQnlPRFE4U0VDUGc5U0EtOHluSERoOEhFaURIR2lFMTJURFY5Q0VTRUREMTdUODg9aHpLRFRFazNTRExJeXNrRkJqRkI9a1NFQ2JKSWlFOUZUM1FEUTRTRUNQaklpRS0yaVhOQlE0U0VDYkpJaUV6OHp6VS1Bd3BFVXYwNERvOUZCQ1FEU0VkSVVxUEd5TXo4enpVLUF3cEZ6PWc5RHN6NmlIR0Rmc3BHekhqSWlFcUYxN0ctQXdrM1NUaDc9NG83eWlULUF3YzNTVGg3PTRvN3luQTlDRVRDaURLR3o4cz1qbklEaVV4SVVxT0lpRXFGMTdHLUJ3LUlDUEg5REFuRVN5US15SWcyU1NPSWlFbjdWN0dEUTdVRVREMT1UZzkyUnp5RUJBZEZ6PWc5PTR6NmlITEJCN1VFakh6SWlFbjdWN0dEUThoMno9Zzk9NHo2aUhTRXg4VEdqPWc5RHN6NmlIUURTVT1DaURISHlza0ZCeU9EUThUQ2lER0p5c2tGRDNRQlI0U0VDYkpJaUVvPXlqVUJ3c2tHaj1nOVRJPTdpMk5CUjRTRUNiSklpRW8yRjdHLXc0U0VFdmtBVHctN2ozV0JCQXQyRXJLQVNza0VWZkE5Q0lvMkQ9ZzlEc3o2aUhORFNZcEYwckw9VEk4PWhqQTlDSUxDaURIN1Nza0VGPUE5Q1RVSGpIMTlTQT03aERXRXdBSEhqSHpJaUVxRVNqUUJ3c2xFRXJLR3lZODh6blNCUkFwSVQ9Zzk9NG89eURWLWdzVENpRExCVDQ5OHozUkJSNFNFQ2JKSWlFcTZsN1YtQ0VTSXlUR0lqQW43eURWQndza0dqPWc5UGstMlNIQTlDSUxDaURIOFNza0VGPUE5Q1VwSGt2eklpRXFGMTdHQUJBeEUwbmstVDQ5PWhmRUFROHhFVWprNEQ0OTdoRExEQjh4SVNQZzdRSTlGQ1RFQT1mTDN5VEhBRDh6NmlEUUJ3c2xHa21QLVRvLTJTWFdCUjh4SEQ9Zzk9NHBFU2pVLXc0U0VEREs4VEkxQXlXTkJCQXRHMG1QNENza0VWZkE5Q1RRMkVua0p5c2tFRj1BOUNVSEh6RDBFeVEwMlJDT0RTWXRDaURISHlza0VVcU9Cd3NrR2o9ZzlTTTFBekhOQj1veERVcktBVEk9N2kzV0V3NFNFQ2JKSWlFb0VTalctQ0RMSGlUdzN6QXE3VjdHLXc0U0VFbVE3U1E5RnhEVUJCQXBJVXVQNURFMTdWN0ctaVFTRUNUaklpRW43VjdHRGZzdEhVcks4U1kxPVJETkRTWXRDaURIR2pBbz15U1EtUnd3MmlYWEZqOHBJU0RRQndzbElVdms1REUwPWt2SkJ2b3gzej1nOT00bz15elgtVEl3MkNYWERmMG83MHJXLXc0U0VFbjBBVHc5MmlHU0J3c2szU1hYRGYwcElTeVAtQXNUQ2lESzlTQT04em5KRGlZSENpREhHZmdwPXlqVUVSc2tHaURLOFQ4LTh6SEpEaVlvRUNiRzlUMD09bD1ROUNFU0VFams4VEkwQXluVURpVXhIRXZrR3lJMS1pQ1Q5Q0ljRUNQZzlQay0yVDNXREI3UUZFblc5PTRrRlZ2QTlDVURIMG1RLVBvMUF5SEE5Q0lMQ2lESklpRW43VjdHREE3TUhVcU9JaUVxRjE3R0J3c2w0Q0RHSWlFMEF5blVFeVV4SUVxUEd6MD02aUNUOUNUUTJFbmtJaUVuNmlIVEJDVWgyekNQRnpnMTZpQ1Q5Q1UwMlRIeDg9Z283ajNHQlNJLUl5WFgtU1VvPXlERy13c2xIVXJXOT00a0VpM1NCUUFsSFVqMD1DRW42aUhRQkJBc0VDYkc5VDA9PWw9UTlDRVNFRW5rNENZa0VVYkdEU1l4R2tuZzlEc2tGQmpGQkRFazNTREg3PWdxRVNUWC1pSUMyQ2JIQj1rcUVqelUtaUlvM3lER0lpRTA9aTNOQlFzazNTREs4REVwPWpqV0JSd29JU1B4QT1rcTdpVFItUXdjMkREVzNDRXE3eVhKLXg4dzJ5VGhFajhvN3pIRy1DSUcyVER3OURza0ZDWE5Fd0FHRUNiRzlUMD09bD1ROUNFU0VFajAzQ1E4LWlDVDlDST1GREhLQkRJcDd6elhCQ0lERVNYeEFERW8yVGpHLXdzbEgwdjBHeU1rRVViR0RTWXhHa25nOURza0ZCREZEQjhzRUNiRzlTVXBGRGlRQlNJLUlUREs5PW8wPXppUy1USTBJU0RHSWlFMD1pWEhEQjhzRUNiRzlERTE3eVNQQlE4dEVTWHhCPXNvRkR5Uy1TSWdJeVQwNHZrdUZ5M1g5Q0VTRUVya0d2dzE9bDdHLWlFa0l5VGhFajhtRVNEVy1USTBFQ1BnOVNFLUZDM1NCUTdVSVVuSzhUdzEtaUNUOUNFa0dpREs5VEUwPWh6SURQc3AyVEgxOVRJOD1oRFM5Q0lLRUNER0lpRTkyaVdQQlJBbElVajA1RDBrRVViRy1Cd2dFQ1BnOVRJPTdpM1dFdzhISERHUT1UZzk9anpHLWlFa0l5WEg9REFwN3lTUy1TSW8zeURHSWlFODdpM1hEUTdVRlVqMDR5RXFFQ0RVOUNFU0VFdktBVEUtMlVQVERTRWszU0RIOEQwbzZodlg5Q0VTRUVxUDNDTTFBekhOQj1veEd6SGc5PTRrRVNEVS1DSWtIaVR4Nz1nbz16eU8tUXdzMmlieEZqSXA3ejNKLURJczN5WHhCPXNwRVU3VUJESTBJU2JrOVNRcDdpRFUtU0kwSXlTUD1TQW89anpVLUJ3R0lDV1BBU1VxNzBLTy1ESTFFaVhoPVNNa0VGN0dEZzdVSVVqMT1UZzkyUnZHLWlFa0VDUGc5VGctMlRIUUJCOD1JVWprR3o4a0VVYkctQXNrR2lES0d6ST03aENPRGlVSElVdmc5PTRrRkJ5T0RROFNFQ1BnOVNJOTJqM1NFd0FsM0NESEdpRTlGVDNRRFFza0dpREw9U0EtRkV2SkV3M1UyVEgxOVRJOD1oRFM5Q0lLRUNUSEJDRW42aUhJQlJBMUd6Q1BBVGcxNmlDVDlDST1GREhLQkRJcDd6elhCQ0lERVNYeEFERW8yVGpHLXdzbDIwamtHekktMmpuRkV3c2szU0RHM3pJbkVTaU8tUXdrSVNYSC1RNG49em1WLUJyUDJDVEhEakFvPTA3Vj1SckwyMDNnM3pBbkVUelctVElnSXliaDhRNG49empHLXdzbEhESDE9UHM5MmlIUDlDSUtFRXVQR3lVOC1pRFE5Q1VISVV6MUFTUUFBenpHLWlFa0hpREdJaUU4PWh6WEV3OGhHa25sPVRnOT1qekctaUVrSUNUaDlERW49eWpWLXh3ZzN5REwzdXpPN3d5UDNPek42Z3lQM1RnOEdVaktIZXpOMlF5UTctelM2UXlQM1NrUUgwPUFHaXdBekJtUDA9c2N6Qm1QRGY3UTNCbj1FPTg4M2hlUDU9azhDUi1TRGkzUTIwMlE1djNUMlVyQ0U9RFUzeHlVMD1uTnpCbmcwPW5ORkZlQzNQbkEyaWlDM1BuTHpCbVAwPW9lekJtUEZEc25DRnJSMD1uTnpCcmUwPW5OMlF5UDNPek42Z3lQM1NBTHpCbVAwPXNjekJtUDA9dkwyeGlQST1FcT1DPXJBUVFGQ1Mza0dBOHFFRHJ0QVFVSDRGMzJJU1hQR0VQdEpCa1EybHZxSVNzTDdrSFY0dzhRSGk9TTl5b1VEbDNrQUE3TC16M3VJPXNQOUYzQUh3OEI0RjMySVRBUEFCZVFBU1lIOVNibUlTc0w3aT1HQVJrRkVEM1hJUTh3N2hmTC1Dd2pDU1RlOXdZUDREcnQ5UVVSQ2xma0VRblI9RTNvNFE3TjJBeVE4dXpPN3d5UDNPek42Z3lQM1NFTz1VREJFQ2JBMlJtQzNnakEyUm1PMD1uTnpCbmcwPW5OSDBqUUZnRT16Qm1QMD1zY3pCbVA0dXpOMlF5UDdlek4yVnZNRmkwSnpCbVAwPXNjekJtUDQ9azg0RXpCRGZ2TERCakFEZjBCMmhtVkRDMDkyeHVXNHlyTjJ4ei1EUERBMlJtQzNRckEyUm5BSURzUEJrckpGQzBKSHpiUkZDVUF6Qm1QMD1zY3pCbVAzPTNQMlJ1VTRQak4yUXlQM096Uzd3eVU4dnZMPWtqTDdDTWs3eVh6NHprRzkxNmM="
            }
        )
        resp = self.send_multi_data_return_result(method="POST", url=url, headers=None, send_data=send_data,
                                                  cookies=None, check_status=statusExp)
        auth_code = resp["data"]["authcode"]
        return auth_code

    # 加密接口
    def data_encode(self, param):
        url = "http://152.136.129.218/tools/apiEncode.php?bpStr=%s" % param
        return requests.post(url).text

    # 解密接口
    def data_decode(self, param):
        url = "http://152.136.129.218/tools/apiDecode.php?bpStr=%s" % param
        return requests.post(url).text


apiAutoTask = apiAutoTask()
