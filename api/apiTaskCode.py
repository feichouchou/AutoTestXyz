# -*- coding: UTF-8 -*-
from common.apiBaseCommon import baseCommon
from requests_toolbelt import MultipartEncoder
import requests


class apiAutoTask(baseCommon):

    # 任务完成接口
    def get_rewards_bytop(self, send_data, statusExp=200):
        url = "http://test-api.xss.91xunyue.cn/?service=App.Active.GetRewardsByTop"
        resp = self.send_multi_data_return_result(method="POST", url=url, send_data=send_data, headers=None,
                                                  cookies=None, check_status=statusExp)
        return resp

    # 获取服务端任务auto_code
    def get_autocode(self, statusExp=200):
        url = "http://test-api.xss.91xunyue.cn/?service=App.Active.GetRewardsByTop"
        send_data = MultipartEncoder(
            fields={
                "ts": "",
                "service": "App.Active.GetRewardsByTop",
                "sign": "",
                "data": "WlNlb05ZZUV1bFNndFllRXVTZVlNWWVFdWlpd1ZiUkJUVmg4d3FlaHhmd1lVY3ZobWlCd1hmPWwyaEJBWnNCRkRhdU1VcHg1bGh4RWhyQkY9YmlZVXFmVnpoPXNkY2hKRGV5TWxmPWd5YmgwUXM9eEFaZWdacGZodmJoQVJzQkpFZng4dXFodHhpUFlVY3ZobVppc1lnUEJ6Y2ZZVXI9aHBkeDh2cWh0bWZ3b1Z0Z2hUV2g0VXB4NWxmaEFEcFFndW1TMHNnPVYxaGl3VXI9aHBuUnN1YkFGMmlQb1JiUGhta0J3WXRlTnpjd2NjdGZ4MmZpMGRqLThzaXZjTXNmeEFaZVVZa1JZc2M9Y1VjUDFVbUNjWXBlTjFjQWNNYnYxMmhDd2RqLThzYmh3Q3BnaFVaeW91a0J0bmJoMDZwZ2t1ZmlzWXB2aHpjZ2NNYmZobG1Cd2tsUEZ6aVJBaHRmaG1rQndZai1OemNSME1wZnQ9Yng0bGxRbHNmZVVncGY1bGJ3Y2VnZlZQZEN3TmpnUm9jaWNja1BCbGNQWVZwZ2hVY3g4dWJBRmtpUG8zc3hGbGJla1VwZmh2YmhFTnRoRXZmeU10cWYxb2JoMDZwZVJJamYzQXJ3WXZiaHdDcGhKcGV4QXVrQnRuYmgwNnBmaGxtQnd1Yj1sbWhBbzNwPWhta0J3dHF3VnZodllVcj1ocGF5b3VnPTEwaGdvY3BmNWxieEVscHZSbGNQWVZwUkpFWnlNdHFnbHliaDA2cGhRdG1Cd3ViPTFzZnZrQ3BmNW9tQndqaFFSemNmY1pweE5UV2lVdHFlZ3ZoeHdOdHhJdWtSNGpoUVJ6Y2ZjWnFRZD1iaVlqZj1sbGgtWVpyUWxDbUJ3YXFTWmxjZmNVY3Z4QVpla1lnUEF5Y2ZjTWN2eEFaZWtZZ1BGZmJod0RuPWhwa1NvY2tBRm5oQkFodHhJdG1Cd2FxU1psY2djdXRmdG1iaXNYcHZRdmNSMFFidnd0bUJ3WGd5Wmxodm5FcHdoVWR5TXRidVJSaWdzTnFRZD1iZWtqZj1scWZnbkVwQWxTbUJ3WGd5Wmxmd29EcVFkPWJla2pmPWd4Y3g4Q3BmdENtQnd1YkFGa2lQb2huPWhtbFJZVXB2bGZiaHdEbj1ocWR4OHRsUEZvaEJBUmJSTlVieDhqZj1neWZQWVV0djFTbUJ3WGd5WmxoZ25BdHdsVWJ1TXVieHR3ZlBZVWN3ZD1iaW9qZj1odmZQWVZzeEpEZXl3a2xRRnloQkVkY2hKRGV4WVVweDV6Y1BrQ3BnaHFieU1sYnhjc2h4QWh0eEl0bUJ3YXB2UjBjaTBVckFkPWJ1VXRieWN0aHdvaG49aG1sUllVcHhadmNnY1VyPXhRYmlZWWpDWjFjZ2tDcGZ0Q21Cd3ZsUDFsZlBZVWN3ZD1iaXNqZj1odmZQWVZweEpFZXhZVXB5OWZiaDhSYmdoVG5SMHRidUJ3YmZrZHFRZ3VqU2d0YnlkeWZ1VTNxUkoxbUJvZWstUm1iZmtaaXY1QWJlUVlneVpsY1BrQ3BoRkRYaDBzYj0xbWhCQWhxUkZvbUJ3YXB3aHpjUGtDcGhCVFZoc2xid1ZtaHVZaHNoTkNtQndhcVNabGZQWVVyQWQ9Yng0bGxRbHNmZVVob3hKcGV5MHZnPVYxaVBrQ3BmNW9tQndZcHZCMWNodjdzPXhQVlNvWmd5WmxjUGtDcGhFdlp4OHRxT2h6ZmdzWnR4TXVYaXdsZ3labGNCOENwZnhDbUJ3WGd5WmxoLVlkc3hKcGF4RWxrdWhzaHhFZG49aG1sUllVcHZSMGNpMHViZjFRaC1ZYWtQQXZjaDhDcGZ0Q21Cd3ViQUZ5aEJBUnF3bFNYaDh3Z3labGNCOENwZnhRYWkwWnR3UXRjeTB1Y2Z4QWhDd2pmPWh2ZlBZVnNRbFRWaWt1cXh0ZmJoMDduPWhtaC1ZYWtSSjBjeDBObj1obG5SWVVxZmxraVBzZHFSSnFrUllVcHk5ZmJoMGNiZnhBWmlnWWd5WmxjUGtDcGdocFhoc3VxZ0ZmYmgwN249aHFaeDh0cXZseWgtVWhuPWhsblJZVXF2MW9oQkEzcFJGRFdlUXRrPWxvaEI4Q3BmNW9tQndqZj1odmZQWVZyUkZxY3gwdXFodGxmd29kYndsVWJ5MHNrLWh4ZlBZVWN3ZD1iZU1YcHZReGNSMFF0UHgxVmlvbGxQbHBjUW92cWdsUWNlTVprPVZuZlBZVXJBZD1ieTBsay1SMmh1WVZiUlJVWng4amY9Z3lmUFlWcFFndWN4OHRnQVYxaHVUOHFSTkRleXdqYkFWeGZlVVJyQkJUYnl3a2xRRm9mdnNEa1FWQlZpTWtiPWx5ZGZZWmZnaFRjeDBsa0Nkb2hCPUVzUWxVZHg4dXF5ZFFldmY4clFndmJ5a2NmPTE5ZnZvaGJ4QlRjeDhqYnVoMWhnb2hzaE5EYXVNc2staHhpdnN6clFoVFhpY3NrZkJtZGZvdnBSRlRleGt1cWVnc2Znc2RyUkV1V2hrdnFnVm1pUG5FdGhWRWF1UWtrQ2RtaHVUOHNRQj1jdlFsYndWeWh3b1JxeEZwZXVNc2s9MWloQj1FYlFoVWR5TXRidVJpaVJBaHB4TkRYaXd4aFBVdGZnb0RweEV1VmljY2Y9MTlmdVlWcFJOcGtPTXdsU2QwaVFvUnJBZ3VYaWN0a2ZCbWRmb3ZjaEpwWGkwa2J1aHpmd2pFYmhGcGN4c3RnQnRsaEJBUmJRbFRkdXNnYmdGS2hnb1p0aEVzWmgwY2dCTXhoQj1FdHdndVhpb2xsU2RRZXZmOHJRZ3ZieWtjZj0xOWh2bzNxeEJFZHVzZ3FlaHJod2dNcHdCRG5TTXRxZ1ZraEI3RXBRZ3VjeDh0Z0FWMWZnc2RyUkV1V2VzdWxRVmtodm9ac3hGVFZmUVViUEZ3ZmdvdnNnbFVkeU1rYmVocGhnb2hyQWxDWGVRdHFmMWtodm8zcGhKcGF1TWxrQUUwZmdvPXNRQj1jdlF0az1WcWh4QWhiUkJUY3hrbHFodG9odm9kZFFoVG1TY2NmPTE5aHduRWJSQlRYaWdqYndGb2lQb2hweE5FblNzdms9VnZmZVRFc1JGUlpoMGNnLWgxaGdvaHNoTkRhdU1zay1oeGl2c3pyUWhUWGljc2tmQm1kZnNOdGhFdmpTTXRrQnNzaWdzRGd4RkRuU011aFFGc2Zpd05pZ2hUYnkwY2Y9MTloQXNkclB0cWN4OHRxdjF5aEJ2QXFnaFRuU1lqYndGc2gtWUR0Uk5UYXlZa2J1aHdod2dNcHdCRWF1TXNqLVIyZnduQXR4RXZiaWd2Zy1ndGZlVXpkUlJEa1JzdGJ1QnNkZllaZmhKcFhlTWtsUUZzaHVUQW94TnBleDB2Zy1oMWl2c1JiZ2hUblIwdGJ1QndkZllaZmhJdWtSRXRxaHRwaGdvWnBSRnFkeGt0ay1nc2hnbkVzaFZFYXVRa2tDZG1odVQ4c1FCPWN2UXViQUZraVBvM3N4RnBheXd3a3VobmZ3c2RxUWd2ZHVzdWxRVmtodm9ac3hGVFZmUVViUEYyaVBvaHNBY3VjeWt2ay1Rc2Z3c1ZkUkpVZXhzdGc9MXlod244ZmZnc1p5MHZnQVZ6Zk9VZHFSTkRleDB2Zy1oMWl2c1JiZ2hUblIwdGJ1QndkZllaZmhORGtTWXZndWhuZndzZHFRZ3ZkeWt1cXlkMGlRb1JyQWd1WGljdGtmQm1kZnN6clFoVFhpY3NqLVIyZnduQXR4RXZiaWdZYndGaWgtVTNxeEZwYXVNdmxQbG9pdmt6clFoVFhmRXNrZkJtZGZzenJRaFRYaWNzai1SMmZ3bkF0eEV2Ymlna2stQmxoZ29oc2hORG5TTWxieGNzY1JBbHBRZ3ZkeWt1cXhzMGVoPUVxQkZSWmgwY2hSZHNmZ25Fc1JCUFdpMGxrLVIyaHVZVXNnaFRYaDR4Z3hkc2ZnbkVpeEJSWmgwY2hSZHNmZ25Fc1JCUFdpMGxrLVIyaHVZVXNnbERYZVFrcWlkb2ZPWWRwUkpFblFjaGdlQnNmZVlWc3dCPWN2UXdnQnRraHVUOHJQdHFjeDh0cXYxeWhCdkFxaEV1ZHhrbGdBVXNmd29aYlJFdmJ1c2lnQnRraHVMOHJRQj1jdlF3Z0J0a2h1VDhyUHRxY3g4dHF2MXloQnZBcnhGcWV4MHNieWRvaXZrenJRaFRYZkVza2ZCbWRmc3pyUWhUWGljc2otUjJmd25BdHhFdmJpZ3Rid1Z3Y2djWmRRWkRrUnN0Yk9Cc2RmWVpmaFJEa1JzdGJ1QnNjUkVacVJGcWN5a3VwZVJ6aGdvWnJ4TlVadXNpZ0J0a2h1TDhyUUI9Y3ZRd2dCdGtodVQ4clB0cWN4OHRxdjF5aEJ2QXR4TkRWaGtsYnlka2h4QVpxUWN1ZnkwdGxTZFFldmY4clFndmJ5a2pmPWh2ZlBZVnR3bFRXaTB0Yj1sMmZQWVVjd2Q9YmkwWXFTWmxjUGtDcGhKRWJ5a2xoUVZtaVBvWnN3bERleFlVcHk5ZmJoOE5qQVIxVmZVWWd5WmxjUGtDcGdocGF5MGxrPWxraHhBZGJ3bFVieTBzay1oeGZQWVVjd2Q9YnZFZ2d2MVFjUjR6aHZ0bWJpZ1lmLVJtY3l2N3M9eEFiaXdZcGU5emNBY1V0d2QyYmlzWmdQMWljaTAyYmdsQWJ4NFpqQ2RLZWZrWmtQdG5qUDBYcHZoeGNmWEFwdjExVlNvWWdQaDFjaHY3cz01UWJpMGp0dmgwY3ZjWm92eDJqLVFsZ1BsbmN3a0NwZnRDbUJ3bGdBVXVoZ29acVJGcGF5Y2xreVpsY0I4Q3BoSkRleWd1cWVoMmZ3a0NwZnRDbUJ3a2I9RXRmZ29WclFkPWJla2pmPWxraEI9N2J2MT1WZVVhZz1WZmJoRDdwZnQ9YnVRdWJ3VjFoZ25BcWhGMWJla1VxeU5mYmhBenNSRXZjdVVsbFBsZmJoMDduPWhvbUJ3WGd5WmxmaEFkbj1obWxSWVVxU1psY1BrQ3BoSnBleEV2aFAxZmJoMDduPWhvbUJ3WGd5Wmxodm9SdHhORGtTZ3ViQUZraHZvRG49aG1sUllVcHZRdWN2Y1FiUHgyai1VWXR2RmZiaHdEbj1ocWN4OHdneVpsY0I4Q3BnZD1iaVlqZj1rdGgtVWh0aE5Fa1NvbGt5WmxjQjhDcGdkPWJpWWpmPWxyaHduRXR3ZD1iZWtqZj1sZmJod0RuPWhwYXlvdWhQMHRmaEEzcEFkPWJla2pmPWxmYmhEN3BmdD1ieWtrcWZVc2ZlVXpyUWw9YmVrVXB2QjFmaDB1Y1B4bWktY2xxZ1F3ZndjdWNQeHBmaHdYZj1seWhDd1VjdmhuYXlnbGhQbHloZ29jcGZ0PWJ1TXV0Zmd5YmgwUWJ2MUFhZVVZcHhvdGM9Y1lwZnQ9Ynlja2s9eGxjQndVcz0xQWNpMGFnUVF1Y3dvZ3M9eDJpQndYZj1sa2ZnbzNwPWhta0J3a2tQZ3RmdmNWcVB4MmNpY1prUVF3Zml2N2JQeEFleDBYaz1nd2NlVWdzUWxRZGlvYWdQQnpjeEFVdGY1UWZ4c1VwaVpsZmVVM2JSUlBiZWtVc2dJd2ppZ3NiaU4xYmlZVXFlaGtoZ29jcGY1bGJ4QVpxZ0F2ZngwdXR3aHBiZVVra1FBeGN5MGt0dmhsbUJ3dWdCc3dmd29DcGY1bGJpc1lnUlp6YkIwVXRmMTJmaHdYZj1seWgtWWxxUkpxY3lNdGJ1TmxjQndVdFB4UGJpWVVxdjBzZmdzVmJSQlRXaEV2Z0J0d2Z3WVVjdmhtYWVVWmdQUXNjaTAyYnZ4MmlCd1hmPWwyaHdvZHFSTnBrUjBsa0J0bmJoMDZwZnhtWml3WXB2QjBjZmNjdFAxUWVlTVpnUkl4Y0FjWWJQMVRlaTBaZ1JZdGN4MHVidjVBWngwWnB2d3dmaEFnYlFobVplVVpwdlIyZnZvUXRRbFFaaXNha1BndmZ3b2tjUDVRZWkwWnFnQXNjdm9jcGZ0PWJ5TXViQUZ5aVFzVnJSSXZkaHdhcGZoemJod0NwZ2d1WGVRdHF3RjFpZ1lVY3ZoeGtlb3ppQkF0bFNnaWlpUmxiaVlVcWdGb2lSQTNwd2xUa1I0VXB4NWxjdVVscWdsbWNlTVprUDFsYz1vWWJmMVFiaTBsZj1odmJoRWRxQkJVY3kwdmc9VXNiaDA2cGZ0UWlDZ1l0eG94Y2djaGd2dFFkdXNYa1BCeGNmY01iZjVRZWVRWnR3aDBpdlg3cz10bVppb1lrUkl0Y3gwUWNQMVFqQndYZj1seGZ3c2RiQkV2YnlVVXB4NWxpT1UzcWhCUGJpWVVxaHQyaWdzaHFSUlVlaHdhcGZoemJod0NwaEJUV2kwdmc9VnZodnNkclJGVGVod2FwZmgxY2ZjVXRmdFFaaXNYa1BBdGJoRDdZZUpBU2VUOVllRj1TZVQ5clJCdWhoQS1ZZUV1U2VZTVllWi1TZVQ5bmlSd2pSWTZvUlFoVnVUd2I9QWhWdVQtb3hJeWl4VENiaFZpVk9iOGNoSmVpZWN3Y3hFeFdSWC1udUJnaWVmQ29PUXVXdWp3YnVFaFZ2WHdidUZwbE5mOWJ0UXZaZGY5YnVNMVhldndidUVoVnZYd2J1RmxsPThzckNNaFZ1VHdiPUFoVnVUOVllRXVTZVVPWWVFdWpTTHdidUVoVj1Qd2J1RWhWdVR3YnZJaFZ1VTByQVZsaVJnNlllRXVTZVlNWWVFdVZkZjlidFF1WjlmOWJ5TmRsQjRVb05RdVZ0Zi1mZFF1VnVYd2J1RWhWdlh3YnVGd2tCNHdxdFF1VnRmLWZkUXVWdVg9b1JFMFZSYi1kT0F5aHhVdW9oUmZoeGpFb09BMFhlbkRvTzlpV3ViQVllRXVTZVVPWWVFdWhDZy1zUTVma1J3d3F5TmJtUnc0b2RRdVZ0Zi1mZFF1VnVQQmNPQXlWdXZBZE9JaFZ1VHdjPU1oVz1iPWJRWmRrdlEyaGZOS2V1YzhwPXR6"
            }
        )
        resp = self.send_multi_data_return_result(method="POST", url=url, headers=None, send_data=send_data,
                                                  cookies=None, check_status=statusExp)
        auth_code = resp["data"]["authcode"]
        return auth_code

    # 加密接口
    def data_encode(self, param):
        url = "http://152.136.129.218/tools/apiEncode.php?bpStr=%s" % param
        return requests.post(url).text

    # 解密接口
    def data_decode(self, param):
        url = "http://152.136.129.218/tools/apiDecode.php?bpStr=%s" % param
        return requests.post(url).text


apiAutoTask = apiAutoTask()
